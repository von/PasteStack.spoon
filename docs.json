[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "UNKNOWN DESC",
    "Constructor" : [

    ],
    "doc" : "",
    "Method" : [
      {
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Initializes a PasteStack",
          ""
        ],
        "name" : "init",
        "doc" : "Initializes a PasteStack\n\nParameters:\n * None\n\nReturns:\n * PasteStack object",
        "notes" : [

        ],
        "signature" : "PasteStack:init()",
        "type" : "Method",
        "returns" : [
          " * PasteStack object"
        ],
        "def" : "PasteStack:init()",
        "desc" : "Initializes a PasteStack"
      },
      {
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ],
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "name" : "debug",
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "notes" : [

        ],
        "signature" : "PasteStack:debug()",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "def" : "PasteStack:debug()",
        "desc" : "Enable or disable debugging"
      },
      {
        "parameters" : [
          "* Nothing",
          ""
        ],
        "stripped_doc" : [
          "Pop last item pushed onto stack into pastebuffer.",
          "Does nothing if stack is empty.",
          ""
        ],
        "name" : "push",
        "doc" : "Pop last item pushed onto stack into pastebuffer.\nDoes nothing if stack is empty.\n\nParameters:\n* Nothing\n\nReturns:\n* Nothing",
        "notes" : [

        ],
        "signature" : "PasteStack:push()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "def" : "PasteStack:push()",
        "desc" : "Pop last item pushed onto stack into pastebuffer."
      },
      {
        "parameters" : [
          "* Nothing",
          ""
        ],
        "stripped_doc" : [
          "Push a copy of the current pastebuffer onto the stack.",
          "Leaves paste buffer intact.",
          ""
        ],
        "name" : "pop",
        "doc" : "Push a copy of the current pastebuffer onto the stack.\nLeaves paste buffer intact.\n\nParameters:\n* Nothing\n\nReturns:\n* Nothing",
        "notes" : [

        ],
        "signature" : "PasteStack:pop()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "def" : "PasteStack:pop()",
        "desc" : "Push a copy of the current pastebuffer onto the stack."
      },
      {
        "parameters" : [
          " * table - Table of action to key mappings",
          ""
        ],
        "stripped_doc" : [
          "The method should accept a single parameter, which is a table.",
          "The keys of the table should be strings that describe the",
          "action performed by the hotkeys, and the values of the table should be tables",
          "containing modifiers and keynames\/keycodes. E.g.",
          "  {",
          "    push = {{\"cmd\", \"alt\"}, \"p\"},",
          "    pop = {{\"cmd\", \"alt\"}, \"P\"}",
          "   }",
          "",
          ""
        ],
        "name" : "bindHotKey",
        "doc" : "The method should accept a single parameter, which is a table.\nThe keys of the table should be strings that describe the\naction performed by the hotkeys, and the values of the table should be tables\ncontaining modifiers and keynames\/keycodes. E.g.\n  {\n    push = {{\"cmd\", \"alt\"}, \"p\"},\n    pop = {{\"cmd\", \"alt\"}, \"P\"}\n   }\n\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * PasteStack object",
        "notes" : [

        ],
        "signature" : "PasteStack:bindHotKey(table)",
        "type" : "Method",
        "returns" : [
          " * PasteStack object"
        ],
        "def" : "PasteStack:bindHotKey(table)",
        "desc" : "The method should accept a single parameter, which is a table."
      },
      {
        "parameters" : [
          "* None",
          ""
        ],
        "stripped_doc" : [
          "Open a hs.chooser instance allowing to choice of stack elements.",
          ""
        ],
        "name" : "chooser",
        "doc" : "Open a hs.chooser instance allowing to choice of stack elements.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "notes" : [

        ],
        "signature" : "PasteStack:chooser()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "def" : "PasteStack:chooser()",
        "desc" : "Open a hs.chooser instance allowing to choice of stack elements."
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "parameters" : [
          " * table - Table of action to key mappings",
          ""
        ],
        "stripped_doc" : [
          "The method should accept a single parameter, which is a table.",
          "The keys of the table should be strings that describe the",
          "action performed by the hotkeys, and the values of the table should be tables",
          "containing modifiers and keynames\/keycodes. E.g.",
          "  {",
          "    push = {{\"cmd\", \"alt\"}, \"p\"},",
          "    pop = {{\"cmd\", \"alt\"}, \"P\"}",
          "   }",
          "",
          ""
        ],
        "name" : "bindHotKey",
        "doc" : "The method should accept a single parameter, which is a table.\nThe keys of the table should be strings that describe the\naction performed by the hotkeys, and the values of the table should be tables\ncontaining modifiers and keynames\/keycodes. E.g.\n  {\n    push = {{\"cmd\", \"alt\"}, \"p\"},\n    pop = {{\"cmd\", \"alt\"}, \"P\"}\n   }\n\n\nParameters:\n * table - Table of action to key mappings\n\nReturns:\n * PasteStack object",
        "notes" : [

        ],
        "signature" : "PasteStack:bindHotKey(table)",
        "type" : "Method",
        "returns" : [
          " * PasteStack object"
        ],
        "def" : "PasteStack:bindHotKey(table)",
        "desc" : "The method should accept a single parameter, which is a table."
      },
      {
        "parameters" : [
          "* None",
          ""
        ],
        "stripped_doc" : [
          "Open a hs.chooser instance allowing to choice of stack elements.",
          ""
        ],
        "name" : "chooser",
        "doc" : "Open a hs.chooser instance allowing to choice of stack elements.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "notes" : [

        ],
        "signature" : "PasteStack:chooser()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "def" : "PasteStack:chooser()",
        "desc" : "Open a hs.chooser instance allowing to choice of stack elements."
      },
      {
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ],
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "name" : "debug",
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "notes" : [

        ],
        "signature" : "PasteStack:debug()",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "def" : "PasteStack:debug()",
        "desc" : "Enable or disable debugging"
      },
      {
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Initializes a PasteStack",
          ""
        ],
        "name" : "init",
        "doc" : "Initializes a PasteStack\n\nParameters:\n * None\n\nReturns:\n * PasteStack object",
        "notes" : [

        ],
        "signature" : "PasteStack:init()",
        "type" : "Method",
        "returns" : [
          " * PasteStack object"
        ],
        "def" : "PasteStack:init()",
        "desc" : "Initializes a PasteStack"
      },
      {
        "parameters" : [
          "* Nothing",
          ""
        ],
        "stripped_doc" : [
          "Push a copy of the current pastebuffer onto the stack.",
          "Leaves paste buffer intact.",
          ""
        ],
        "name" : "pop",
        "doc" : "Push a copy of the current pastebuffer onto the stack.\nLeaves paste buffer intact.\n\nParameters:\n* Nothing\n\nReturns:\n* Nothing",
        "notes" : [

        ],
        "signature" : "PasteStack:pop()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "def" : "PasteStack:pop()",
        "desc" : "Push a copy of the current pastebuffer onto the stack."
      },
      {
        "parameters" : [
          "* Nothing",
          ""
        ],
        "stripped_doc" : [
          "Pop last item pushed onto stack into pastebuffer.",
          "Does nothing if stack is empty.",
          ""
        ],
        "name" : "push",
        "doc" : "Pop last item pushed onto stack into pastebuffer.\nDoes nothing if stack is empty.\n\nParameters:\n* Nothing\n\nReturns:\n* Nothing",
        "notes" : [

        ],
        "signature" : "PasteStack:push()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "def" : "PasteStack:push()",
        "desc" : "Pop last item pushed onto stack into pastebuffer."
      }
    ],
    "name" : "PasteStack"
  }
]
